---
layout: post
title: "25年2月复习与总结"
date:  2025-02-23 23:55:00 +0800
categories: jekyll update
---  

***

**重点题目**
* [编辑距离](#Edit)
* [LIS1](#LIS1)
* [LIS2](#LIS2)
* [最长定差子序列](#LDS)
* [俄罗斯信封套娃](#RussianEnv)
* [股票问题（并不是很难）](#tickets)
* [不同的二叉搜索树](#Important)
* [交错字符串](#string)
* [解决智力问题](#IQ)
* [零钱兑换](#coinChange)
* [好字符串的构造方法](#goodString)
* [完全平方数](#numSquare)


***





# 假期中的内容
-------------------------
## LeetCode

### 139.单词拆分
>给你一个字符串 s 和一个字符串列表 wordDict 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 s 则返回 true.  
注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。

**C版**

    bool wordBreak(char* s, char** wordDict, int wordDictSize) {
        int n=strlen(s);

        int dp[n+1];
        memset(dp, 0, sizeof(dp));

        dp[0] = 1;

        for(int i=0;i<n;i++){
            if(dp[i]){
                for(int j=0;j<wordDictSize;j++){
                    int len=strlen(wordDict[j]);
                    if(i+len<=n&&strncmp(s+i, wordDict[j],len)==0){
                        dp[i+len] = 1;
                    }
                }
            }
        }

        return dp[n];
    }


**JAVA**


    class Solution {
        public boolean wordBreak(String s, List<String> wordDict) {
            Set<String> set = new HashSet<>(wordDict);
            boolean[] dp = new boolean[s.length() + 1];
            dp[0] = true;

            for (int i = 1; i <= s.length(); i++) {
                for (int j = 0; j < i; j++) {
                    if (dp[j] && set.contains(s.substring(j, i))) {
                        dp[i] = true;
                        break;
                    }
                }
            }

            return dp[s.length()];
        }
    }

思路算是比较简单的，用到了一些现成的方法`strncmp`和`contains`、`substring`等  
注意加强对Java Util ：Set Map List等方法的理解使用  
回头进一步学习Java的时候尽量注意

***

### 516. 最长回文子序列
>给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。  
子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。

    int longestPalindromeSubseq(char* s) {
        int n=strlen(s);

        int dp[n][n];
        memset(dp, 0, sizeof(dp));

        for(int i=0;i<n;i++){
            dp[i][i]=1;
        }

        for(int i=n-1;i>=0;i--){
            for(int j=i+1;j<n;j++){
                if(s[i]==s[j]){
                    dp[i][j]=dp[i+1][j-1]+2;
                }else{
                    dp[i][j]=dp[i+1][j]>dp[i][j-1]?dp[i+1][j]:dp[i][j-1];
                }
            }
        }
        return dp[0][n-1];
    }

dp[i][j]代表i到j里最长回文子序列长度  
长字符串的状态是由短字符串的状态推导出来的，所以要从短字符串开始推导  
所以要从后往前推导  
这么做似乎省下了之前用的int len=2;len<=n;len++的方法  
**！！注意！！**  
这题也可用两个字符串的最长公共子序列（LCS）长度的思路来解，str, str.reverse()  
下面贴这个方法的Java代码

    class Solution {
        public int longestPalindromeSubseq(String s) {
            String s1 = new StringBuilder(s).reverse().toString();
            int n = s.length();
            int[][] dp = new int[n + 1][n + 1];
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if (s.charAt(i - 1) == s1.charAt(j - 1)) {
                        dp[i][j] = dp[i - 1][j - 1] + 1;
                    } else {
                        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                    }
                }
            }
            return dp[n][n];
        }
    }

### 1143.最长公共子序列
>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。  
一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。  
例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。
两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。

    int longestCommonSubsequence(char* text1, char* text2) {
        int n1=strlen(text1);
        int n2=strlen(text2);

        int dp[n1+1][n2+1];
        memset(dp,0,sizeof(dp));

        for(int i=0;i<n1;i++){
            dp[i][0]=0;
        }
        for(int i=0;i<n2;i++){
            dp[0][i]=0;
        }
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){

                if(text1[i-1]==text2[j-1])
                {
                    dp[i][j]=dp[i-1][j-1]+1;
                }else{
                    dp[i][j]=fmax(dp[i-1][j],dp[i][j-1]);
                }
            }
        }

        return dp[n1][n2];
    }

dp[i][j]表示text1[0:i]和text2[0:j]的最长公共子序列长度（text1的前i个和text2的前j个字符）  
dp[i][j]=dp[i-1][j-1]+1 if text1[i]==text2[j]  
dp[i][j]=max(dp[i-1][j],dp[i][j-1]) if text1[i]!=text2[j]  
初始化dp[i][0]=0,dp[0][j]=0  
dp[i][j] 表示 text1 的前 i 个字符和 text2 的前 j 个字符的最长公共子序列的长度。  
返回dp[n1][n2]即可  
注意循环的边界条件  
状态转移方程 是基于一定条件 从前一个状态转到当前状态 我们*不关心*前一个状态是经过了怎么样的判断 是什么样的情况 只考虑*从上个状态转到当前来的动态过程*  
这么说似乎有些抽象 具体地讲 对于

    if(text1[i-1]==text2[j-1])
    {
        dp[i][j]=dp[i-1][j-1]+1;
    }else{
        dp[i][j]=fmax(dp[i-1][j],dp[i][j-1]);
    }    

这部分代码，我们不去考虑dp[i-1][j-1]里对text1[i-2] text2[j-2]判断，dp[i-1][j-1]的具体生成，因为其状态已经由先前的递推所确定  
对于i、j不等（特别是相差很大）的情况更是不必深究 因为其状态也是由其前确定的状态得来

<a name="Edit"></a>

### 72.编辑距离
>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。  
你可以对一个单词进行如下三种操作:  
插入一个字符  
删除一个字符  
替换一个字符

    int minDistance(char* word1, char* word2) {
        int n1=strlen(word1);
        int n2=strlen(word2);

        int fmin(int a,int b,int c){
            int min=a;
            min=min<b?min:b;
            min=min<c?min:c;
            return min;
        }

        int dp[n1+1][n2+1];
        memset(dp,0,sizeof(dp));

        for(int i=0;i<n1+1;i++){
            dp[i][0]=i;
        }
        for(int j=0;j<n2+1;j++){
            dp[0][j]=j;
        }

        for(int i=1;i<n1+1;i++){
            for(int j=1;j<n2+1;j++){
                if(word1[i-1]==word2[j-1])
                {
                    dp[i][j]=fmin(dp[i-1][j-1]-1,dp[i-1][j],dp[i][j-1])+1;
                }else{
                    dp[i][j]=fmin(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1;
                }
            }
        }

        return dp[n1][n2];
    }

太有说法了 这个*题目  
直接贴题解，不多说[力扣官方题解](https://leetcode.cn/problems/edit-distance/solutions/188223/bian-ji-ju-chi-by-leetcode-solution/)**务必要看Bro**


### 712.两个字符串的最小ASCII删除和
>给定两个字符串s1 和 s2，返回 使两个字符串相等所需删除字符的 ASCII 值的最小和 。

    int minimumDeleteSum(char* s1, char* s2) {
        int n1=strlen(s1);
        int n2=strlen(s2);

        int dp[n1+1][n2+1];
        memset(dp,0,sizeof(dp));

        dp[0][0]=0;
        for(int i=1;i<=n1;i++){
            dp[i][0]=dp[i-1][0]+s1[i-1];
        }
        for(int i=1;i<=n2;i++){
            dp[0][i]=dp[0][i-1]+s2[i-1];
        }

        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=dp[i-1][j-1];
                }else{
                    dp[i][j]=fmin(dp[i-1][j]+s1[i-1],dp[i][j-1]+s2[j-1]);
                }
            }
        }

        return dp[n1][n2];
    }

不太有什么好说的，注意边界条件  
再强调一点前面说的 **不要**去抠dp转移的细节和顺序 只抽象的认定状态和基于状态进行下一步转移


### 258.各位相加（Not DP）
>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。

    class Solution {
        public int addDigits(int num) {
            return (num - 1) % 9 + 1;
        }
    }

这道是简单题，没什么好说的，但是存在O(1)的方法  
数学 很奇妙吧 贴题解 走！[力扣官方题解](https://leetcode.cn/problems/add-digits/solutions/1301157/ge-wei-xiang-jia-by-leetcode-solution-u4kj/)  
![题解数学思想](./src/2025-02-23-1.png "很奇妙吧，数学")

### 1422.分割字符串的最大得分
>给你一个由若干 0 和 1 组成的字符串 s ，请你计算并返回将该字符串分割成两个 非空 子字符串（即 左 子字符串和 右 子字符串）所能获得的最大得分。  
「分割字符串的得分」为 左 子字符串中 0 的数量加上 右 子字符串中 1 的数量。

    class Solution {
        public int maxScore(String s) {
            int maxScore = 0;
            int leftZeros = 0;
            int rightOnes = 0;

            // 计算初始右子字符串中 1 的数量
            for (char c : s.toCharArray()) {
                if (c == '1') {
                    rightOnes++;
                }
            }

            // 遍历每一个可能的分割点
            for (int i = 0; i < s.length() - 1; i++) {
                if (s.charAt(i) == '0') {
                    leftZeros++;
                } else {
                    rightOnes--;
                }
                int currentScore = leftZeros + rightOnes;
                maxScore = Math.max(maxScore, currentScore);
            }

            return maxScore;
        }
    }

思路还是很简单的 对每个点位分割遍历是了 不过这个**实现方法很有意思**    
其实就是先假设分割点在第一个字符前 即 整个字符串为右子字符串  
先保存整个字符串中1的个数  
然后遍历字符串 假设当前字符为分割点 当前得分＝左子字符串中0的个数+右子字符串中1的个数  
最大得分就是一个变化量 最后会停在最大值


### 2586.统计范围内的元音字符串数
>给你一个下标从 0 开始的字符串数组 words 和两个整数：left 和 right 。  
如果字符串以元音字母开头并以元音字母结尾，那么该字符串就是一个 元音字符串 ，其中元音字母是 'a'、'e'、'i'、'o'、'u' 。  
返回 words[i] 是元音字符串的数目，其中 i 在闭区间 [left, right] 内。

    class Solution {
        boolean Begin(String str){
                return str.startsWith("a")||str.startsWith("e")||str.startsWith("i")||str.startsWith("o")||str.startsWith("u");
            };
            boolean End(String str){
                return str.endsWith("a")||str.endsWith("e")||str.endsWith("i")||str.endsWith("o")||str.endsWith("u");
            };
        public int vowelStrings(String[] words, int left, int right) {
            int ans=0;

            for(int i=left;i<=right;i++){
                String str=words[i];
                if(Begin(str)&&End(str))
                ans++;
            }
            return ans;
        }
    }

这题好简单啊 我不知道当初我存这个是图什么  
二改：我去看了题解 惊为天人 **真的很有必要进一步学习和巩固包括hash在内的数据结构了**[力扣官方题解](https://leetcode.cn/problems/count-the-number-of-vowel-strings-in-range/solutions/2515213/tong-ji-fan-wei-nei-de-yuan-yin-zi-fu-ch-dau9/)  
![为什么要使用哈希](./src/2025-02-23-02.png)



<a name="LIS1"></a>

### 300.最长的递增子序列 （LIS）
>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。  
子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

    int lengthOfLIS(int* nums, int numsSize) {
        if(numsSize==0)return 0;
        if(numsSize==1)return 1;
        int dp[numsSize]={};


        for(int i=0;i<numsSize;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i])
                    dp[i]=fmax(dp[i],dp[j]+1);
            }

        }
        int ans=dp[0];
        for(int i=1;i<numsSize;i++){
            ans=ans>dp[i]?ans:dp[i];
        }
        return ans;
    }

最长上升子序列问题 思路和状态转换不是很难 pass


<a name="LIS2"></a>

### 673.最长递增子序列的个数
>给定一个未排序的整数数组 nums ， 返回最长递增子序列的个数 。  
注意 这个数列必须是 严格 递增的。

     int findNumberOfLIS(int *nums, int numsSize)
    {
        int dp[numsSize], count[numsSize];
        for (int i = 0; i < numsSize; i++)
        {
            dp[i] = 1;
            count[i] = 1;
        }
        int max = 1;
        for (int i = 1; i < numsSize; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (nums[i] > nums[j])
                {
                    if (dp[j] + 1 > dp[i])
                    {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    }
                    else if (dp[j] + 1 == dp[i])
                    {
                        count[i] += count[j];
                    }
                }
            }
            max = fmax(max, dp[i]);
        }
        int result = 0;
        for (int i = 0; i < numsSize; i++)
        {
            if (dp[i] == max)
            {
                result += count[i];
            }
        }
        return result;
    }


太惦记在300题基础上用数组字典进行记录了  
还是DP 继承了300题的思路  
用count数组记录在i位置结尾的递增子序列个数
  
count[i]=count[j]   找到了更长的递增子序列 在i结尾的序列数就等于在j结尾的序列数    
count[i]+=count[j]  找到了相同长度的递增子序列 在i结尾的序列数就等于在i结尾的序列数加上j结尾的序列数    
这里的在i结尾的序列数其实就是在上一行的j处结尾的序列数    
因为 line19 的if`if (dp[j] + 1 > dp[i])`一定先执行 先进行了状态转移


以下述代码详细理解：

    if (nums[i] > nums[j])
    {
        if (dp[j] + 1 > dp[i])
        {
            dp[i] = dp[j] + 1;
            count[i] = count[j];
        }
        else if (dp[j] + 1 == dp[i])
        {
            count[i] += count[j];
        }
    }

在状态转移过程中`dp[j] + 1 > dp[i]`这个判断一定先执行才会有`dp[j] + 1 == dp[i]`这个判断，最开始的限制条件`nums[i] > nums[j]`保证了这一点  
对dp[i]而言 他可能由前面的多个dp[j]转移而来 而我们只取最大的一个（max(dp[j])+1） 同时由于序列增长，我们自然重置count[i]的值和count[j]相等  
当dp[i]已经由前面最大的dp[j]完成转移后 后面的dp[j]就不可能再比dp[i]大  
当后面剩下的多个dp[j]的值都满足dp[j]+1=dp[i]时，count[i]继续增长  

总的来说 count[i]等于 dp[i]-1得到的值X(长度仅比i处结尾的子序列短1) 拿这个X遍历i前面的dp[j]， 得到多个满足X=dp[j]的j  count[i]=sun(count[j]) 


**还有一个难度更大 时间复杂度更低的方法 记得看**  
[力扣官方题解](https://leetcode.cn/problems/number-of-longest-increasing-subsequence/solutions/1007075/zui-chang-di-zeng-zi-xu-lie-de-ge-shu-by-w12f/)


### 646.最长数对链
>给你一个由 n 个数对组成的数对数组 pairs ，其中 pairs[i] = [lefti, righti] 且 lefti < righti 。  
现在，我们定义一种 跟随 关系，当且仅当 b < c 时，数对 p2 = [c, d] 才可以跟在 p1 = [a, b] 后面。我们用这种形式来构造 数对链 。  
找出并返回能够形成的 最长数对链的长度 。  
你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。

    int compare(const void* a, const void* b) {
        int* pairA = *(int**)a;
        int* pairB = *(int**)b;
        return pairA[0] - pairB[0];
    }
    int findLongestChain(int** pairs, int pairsSize, int* pairsColSize) {    
        qsort(pairs, pairsSize, sizeof(int*), compare);
        int dp[pairsSize]={0};
        int left=0;
        int right=1;



        for(int i=0;i<pairsSize;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(pairs[j][right]<pairs[i][left]||)
                    dp[i]=fmax(dp[i],dp[j]+1);
            }
        }

        int ans=dp[0];
        for(int i=1;i<pairsSize;i++){
            ans=ans>dp[i]?ans:dp[i];
        }
        return ans;
    }


LIS的变式.先将数组按第一维排序，然后采取和LIS一致的遍历方法即可

<a name="LDS"></a>

### 1218.最长定差子序列
>给你一个整数数组 arr 和一个整数 difference，请你找出并返回 arr 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 difference 。  
子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 arr 派生出来的序列。


传统的写法（**如下**）会狠狠超时

    //Wrong Method
    int longestSubsequence(int* arr, int arrSize, int difference) {
        int dp[arrSize]={};

        for(int i=0;i<arrSize;i++)
        {
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(arr[j]+difference==arr[i]){
                    dp[i]=fmax(dp[j]+1,dp[i]);
                }
            }
        }

        int ans=dp[0];
        for(int i=0;i<arrSize;i++){
            ans=ans>dp[i]?ans:dp[i];
        }
        return ans;
    }


正解：

    int longestSubsequence(int* arr, int arrSize, int difference) {
        int* dp = (int*)malloc(arrSize * sizeof(int));
        memset(dp, 0, arrSize * sizeof(int));
        int maxLen = 1;
        int* hashTable = (int*)malloc(20001 * sizeof(int)); // 假设数组元素的范围是 -10000 到 10000
        memset(hashTable, 0, 20001 * sizeof(int));

        for (int i = 0; i < arrSize; i++) {
            int prevValue = arr[i] - difference + 10000;
            if (prevValue >= 0 && prevValue <= 20000 && hashTable[prevValue] > 0) {
                dp[i] = hashTable[prevValue] + 1;
            } else {
                dp[i] = 1;
            }
            hashTable[arr[i] + 10000] = dp[i];
            if (dp[i] > maxLen) {
                maxLen = dp[i];
            }
        }
        return maxLen;
    }


### 1027 最长等差数列
>给你一个整数数组 nums，返回 nums 中最长等差子序列的长度。  
回想一下，nums 的子序列是一个列表 nums[i1], nums[i2], ..., nums[ik] ，且 0 <= i1 < i2 < ... < ik <= nums.length - 1。并且如果 seq[i+1] - seq[i]( 0 <= i < seq.length - 1) 的值都相同，那么序列 seq 是等差的。

    int longestArithSeqLength(int* nums, int numsSize) {
        if(numsSize==2)return numsSize;
        int dp[numsSize][1001];
        //似乎可以直接memset设置全1
        for (int i = 0; i < numsSize; i++) {
            int d = 0;
            for (int j = 0; j < 1000; j++) {
                dp[i][j] = 1;
            }
            for (int j = 0; j < i; j++) {
                d = nums[i] - nums[j] + 500;
                dp[i][d] = fmax(dp[j][d] + 1, dp[i][d]);
            }
        }

        int ans = dp[0][0];
        for (int i = 0; i < numsSize; i++) {
            for (int j = 0; j < 1000; j++) {
                ans = ans > dp[i][j] ? ans : dp[i][j];
            }
        }
        return ans;
    }

二维dp ，数组的第二维为公差d  
计算d的时候考虑到公差为负的情况对其进行了整体偏移（+500）


### 1035 不相交的线
>在两条独立的水平线上按给定的顺序写下 nums1 和 nums2 中的整数。  
>现在，可以绘制一些连接两个数字 nums1[i] 和 nums2[j] 的直线，这些直线需要同时满足：  
>nums1[i] == nums2[j]  
>且绘制的直线不与任何其他连线（非水平线）相交。  
>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。  
>以这种方法绘制线条，并返回可以绘制的最大连线数。

    int maxUncrossedLines(int* nums1, int nums1Size, int* nums2, int nums2Size) {
        int dp[nums1Size+1][nums2Size+1];
        memset(dp,0,sizeof(dp));

        for(int i=1;i<=nums1Size;i++){
            for(int j=1;j<=nums2Size;j++){
                if(nums2[j-1]==nums1[i-1]){
                    dp[i][j]=dp[i-1][j-1]+1;
                }else{
                    dp[i][j]=fmax(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[nums1Size][nums2Size];
    }

这不就是最长公共子序列（LCS）套皮



# 开学后
-----------------------------------
### 1312 让字符串成为回文串的最少插入次数
>给你一个字符串 s ，每一次操作你都可以在字符串的任意位置插入任意字符。  
>
>请你返回让 s 成为回文串的 最少操作次数 。  
>
>「回文串」是正读和反读都相同的字符串。

    int minInsertions(char* s) {
        int len = strlen(s);

        int dp[len + 1][len + 1];
        memset(dp, 0, sizeof(dp));

        for (int i = 0; i < len; i++) {
            dp[i][0] = 0;
            dp[0][i] = 0;
        }

        for (int i = 1; i <= len; i++) {
            for (int j = 1; j <= len; j++) {
                if (s[i - 1] == s[len - j]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = fmax(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        int ans = len - dp[len][len];
        return ans;
    }

定性的理解 最坏的情况就是一个长n的字符串需要插n次变成回文串  
即在后面插入字符串s逆序，让其成为回文串，然后就是想办法减少插入的次数.   
也就是从s的逆序里面找到跟s尽可能多的相同字符， 即是找s和s逆序的最长公共子序列。   
 例如： leetcode + edocteel的LCS为 eee，输出s.size() - LCS(s, s.reverse)  
注意`s[i-1]== s[len-j]`处对s的i索引查找 由于s索引从0开始而i从1开始 所以从s[i-1]才能完整地遍历

### 1456 定长字串中元音的最大数目
>给你字符串 s 和整数 k 。   
请返回字符串 s 中长度为 k 的单个子字符串中可能包含的最大元音字母数。  
英文中的 元音字母 为（a, e, i, o, u）。

    int maxVowels(char* s, int k) {
        int len=strlen(s);

        int num=0;
        for(int i=0;i<k;i++){
            if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')
            num++;
        }

        int ans=num;
        for(int i=0;i<len-k;i++){
            if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')
            num--;
            if(s[i+k]=='a'||s[i+k]=='e'||s[i+k]=='i'||s[i+k]=='o'||s[i+k]=='u')
            num++;
            ans=ans>num?ans:num;
        }
        return ans;
    }

很简单的滑动窗口 不多说

### 643
### 1343
都是加了一些简单限制条件的滑动窗口 不多说

### 2090 半径为k的子数组平均值
>给你一个下标从 0 开始的数组 nums ，数组中有 n 个整数，另给你一个整数 k 。
>
>半径为 k 的子数组平均值 是指：nums 中一个以下标 i 为 中心 且 半径 为 k 的子数组中所有元素的平均值，即下标在 i - k 和 i + k 范围（含 i - k 和 i + k）内所有元素的平均值。如果在下标 i 前或后不足 k 个元素，那么 半径为 k 的子数组平均值 是 -1 。
>
>构建并返回一个长度为 n 的数组 avgs ，其中 avgs[i] 是以下标 i 为中心的子数组的 半径为 k 的子数组平均值 。
>
>x 个元素的 平均值 是 x 个元素相加之和除以 x ，此时使用截断式 整数除法 ，即需要去掉结果的小数部分。
>
>例如，四个元素 2、3、1 和 5 的平均值是 (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75，截断后得到 2 。

    int* getAverages(int* nums, int numsSize, int k, int* returnSize) {

        *returnSize = numsSize;
        int* arr = (int*)malloc(sizeof(int) * numsSize);

        if (k == 0) {
            for (int i = 0; i < numsSize; i++) {
                arr[i] = nums[i];
            }
            return arr;
        }
        if (numsSize <= 2 * k) {
            for (int i = 0; i < numsSize; i++) {
                arr[i] = -1;
            }
            return arr;
        }

        for (int i = 0; i < k; i++) {
            arr[i] = -1;
            arr[numsSize - 1 - i] = -1;
            // ans+=nums[i]+nums[k+i];
        }

        long ans = 0;
        for (int i = 0; i < 2 * k + 1; i++) {
            ans += nums[i];
        }

        for (int i = k; i < numsSize - k; i++) {
            arr[i] = ans / (2 * k + 1);
            if (i + k + 1 < numsSize) {
                ans = ans - nums[i - k] + nums[i + k + 1];
            }
        }

        return arr;
    }

非显式给出窗口长度的滑动窗口


### 2379 得到K个黑色块的最少涂色次数
简单题 不多说

### 1052 爱生气的书店老板
>有一个书店老板，他的书店开了 n 分钟。每分钟都有一些顾客进入这家商店。给定一个长度为 n 的整数数组 customers ，其中 customers[i] 是在第 i 分钟开始时进入商店的顾客数量，所有这些顾客在第 i 分钟结束后离开。
>
>在某些分钟内，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。
>
>当书店老板生气时，那一分钟的顾客就会不满意，若老板不生气则顾客是满意的。
>
>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 minutes 分钟不生气，但却只能使用一次。
>
>请你返回 这一天营业下来，最多有多少客户能够感到满意 。

    int maxSatisfied(int* customers, int customersSize, int* grumpy, int grumpySize, int minutes) {
        int total=0;int num=0;
        for(int i=0;i<minutes;i++){
            if(!grumpy[i])total+=customers[i];
            if(grumpy[i])num+=customers[i];
        }

        int max=num;
        for(int i=0;i<customersSize-minutes;i++){
            if(grumpy[i])num-=customers[i];
            if(grumpy[i+minutes])num+=customers[i+minutes];
            if(!grumpy[i+minutes])total+=customers[i+minutes];
            max=max>num?max:num;

        }
        return total+max;
    }

基于`grumpy`分别计算老板不生气时满意的顾客数total，再加上一个窗口内因老板生气而不满意的顾客数max 就是我们需要的答案

<a name="RussianEnv"></a>

### 354 俄罗斯套娃信封问题
>给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。
>
>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。
>
>请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。
>
>注意：不允许旋转信封。

    int maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize) {
        int compare(const void* a, const void* b) {
        int* pairA = *(int**)a;
        int* pairB = *(int**)b;
        if (pairA[0] == pairB[0]) {
            return pairB[1] - pairA[1]; // 如果宽度相同，则按高度降序排序
        }
        return pairA[0] - pairB[0]; // 否则按宽度升序排序
    }

        if (envelopesSize == 0) return 0;

        qsort(envelopes, envelopesSize, sizeof(int*), compare);

        int* dp = (int*)malloc(envelopesSize * sizeof(int));
        int length = 0;

        for (int i = 0; i < envelopesSize; i++) {
            int left = 0, right = length, mid;
            while (left < right) {
                mid = left + (right - left) / 2;
                if (dp[mid] < envelopes[i][1]) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            dp[left] = envelopes[i][1];
            if (left == length) length++;
        }
        return length;
    }

题目的思路还算简单 跟之前做过的某道dp题目有相似之处 但是（按照那道题的思路）我自己的写法会超时（不使用二分查找而是双层遍历）  
正解这个二分查找的解法暂时没看懂 先贴个题解回头看  
[leetcode官方题解](https://leetcode.cn/problems/russian-doll-envelopes/solutions/633231/e-luo-si-tao-wa-xin-feng-wen-ti-by-leetc-wj68/)


<a name="tickets"></a>

### 121 买卖股票最佳时机
>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
>
>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
>
>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

    int maxProfit(int* prices, int pricesSize) {
        int min=prices[0];
        int max=0;
        for(int i=0;i<pricesSize;i++){
            max=(prices[i]-min)>max?(prices[i]-min):max;
            min=min<prices[i]?min:prices[i];
        }
        return max;
    }

不断去记录局部最优解 遍历完之后就是全局最优解


### 309 买卖股票的最佳时机 含冷冻期
>给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。​
>
>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
>
>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

    int maxProfit(int* prices, int pricesSize) {
        int dp[pricesSize][3];
        memset(dp,0,sizeof(dp));

        //0持有 1不持有且冷冻期 2不持有且不冷冻

        dp[0][0]=-prices[0];
        dp[0][1]=0;
        dp[0][2]=0;

        for(int i=1;i<pricesSize;i++){
            dp[i][0]=fmax(dp[i-1][2]-prices[i],dp[i-1][0]);
            dp[i][1]=dp[i-1][0]+prices[i];
            dp[i][2]=fmax(dp[i-1][1],dp[i-1][2]);
        }
        return fmax(dp[pricesSize-1][1],dp[pricesSize-1][2]);
    }

根据题意分出不同的状态（持有 不持有 ） 其中不持有也存在不同状态  
根据情境计算状态转移


### 714 买卖股票的最佳时机 含手续费
>给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
>
>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
>
>返回获得利润的最大值。
>
>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。


    int maxProfit(int* prices, int pricesSize, int fee) {
        //  持有 0              
        //  不持有 1  
        //  卖出算手续费

        int dp[pricesSize][2];
        memset(dp,0,sizeof(dp));

        dp[0][0]=-prices[0];
        dp[0][1]=0;

        for(int i=1;i<pricesSize;i++){
            //持有：当天买入/昨天持有
            dp[i][0]=fmax(dp[i-1][1]-prices[i],dp[i-1][0]);
            //不持有：今天卖出/昨天不持有
            dp[i][1]=fmax(dp[i-1][0]+prices[i]-fee,dp[i-1][1]);
        }
        return dp[pricesSize-1][1];
    }

思路和上题相似 解决起来相当流畅 不多说 看看代码就能懂


### 2595 奇偶位数
简单题 Pass

<a name="Important"></a>

### 96 不同的二叉搜索树
>给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。

    int numTrees(int n) {
        int G[n + 1];
        G[0] = 1;
        G[1] = 1;

        for (int i = 2; i <= n; i++) {
            G[i] = 0;
            for (int j = 1; j <= i; j++) {
                G[i] += G[j - 1] * G[i - j];
            }
        }

        return G[n];
    }

都怪当年没有学好数据结构😭 完全看不懂这是怎么个事  
[LeetCode官方题解](https://leetcode.cn/problems/unique-binary-search-trees/solutions/329807/bu-tong-de-er-cha-sou-suo-shu-by-leetcode-solution/)


<a name="string"></a>

### 97 交错字符串
>给定三个字符串 s1、s2、s3，请你帮忙验证 s3 是否是由 s1 和 s2 交错 组成的。
>
>两个字符串 s 和 t 交错 的定义与过程如下，其中每个字符串都会被分割成若干 非空 子字符串：
>
>s = s1 + s2 + ... + sn
>t = t1 + t2 + ... + tm
>|n - m| <= 1
>交错 是 s1 + t1 + s2 + t2 + s3 + t3 + ... 或者 t1 + s1 + t2 + s2 + t3 + s3 + ...
>注意：a + b 意味着字符串 a 和 b 连接。

    bool isInterleave(char* s1, char* s2, char* s3) {
        int len1 = strlen(s1);
        int len2 = strlen(s2);
        int len3 = strlen(s3);

        // 如果 s1 和 s2 的长度之和不等于 s3 的长度，直接返回 false
        if ((len1 + len2) != len3) {
            return false;
        }

        // 创建一个二维数组 dp，用于存储中间结果
        bool **dp = (bool **)malloc((len1 + 1) * sizeof(bool *));
        for (int i = 0; i <= len1; i++) {
            dp[i] = (bool *)malloc((len2 + 1) * sizeof(bool));
        }

        // 初始化 dp 数组
        dp[0][0] = true;
        for (int i = 1; i <= len1; i++) {
            dp[i][0] = dp[i - 1][0] && (s1[i - 1] == s3[i - 1]);
        }
        for (int j = 1; j <= len2; j++) {
            dp[0][j] = dp[0][j - 1] && (s2[j - 1] == s3[j - 1]);
        }

        // 填充 dp 数组
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                dp[i][j] = (dp[i - 1][j] && (s1[i - 1] == s3[i + j - 1])) ||
                           (dp[i][j - 1] && (s2[j - 1] == s3[i + j - 1]));
            }
        }

        // 获取结果
        bool result = dp[len1][len2];
        return result;
    }

本题的一个易错点是使用双指针解题，双指针法难以处理某些特殊情况 eg: aaa  aabaa    aaaabaaa  
正确的组合是 aa(s1/s2)  aa(s2/s1) b  aaa 双指针很难处理（因为要回溯的情况很复杂）  

dp[i][j] 表示 s1 的前 i 个字符和 s2 的前 j 个字符是否能交错组成 s3 的前 i + j 个字符。
通过填充这个二维数组，我们可以最终得到 dp[len1][len2]，即 s1 和 s2 是否能交错组成 s3
  

想了半天dp能不能处理需要交替使用待选串的情况  
当然是可以的  
因为对前一个状态来说  
不管是基于s1还是s2完成的判断  
接下来都可以用另一个串或当前串来继续判断

<a name="IQ"></a>

### 2140 解决智力问题
>给你一个下标从 0 开始的二维整数数组 questions ，其中 questions[i] = [pointsi, brainpoweri] 。
>
>这个数组表示一场考试里的一系列题目，你需要 按顺序 （也就是从问题 0 开始依次解决），针对每个问题选择 解决 或者 跳过 操作。解决问题 i 将让你 获得  pointsi 的分数，但是你将 无法 解决接下来的 brainpoweri 个问题（即只能跳过接下来的 brainpoweri 个问题）。如果你跳过问题 i ，你可以对下一个问题决定使用哪种操作。
>
>比方说，给你 questions = [[3, 2], [4, 3], [4, 4], [2, 5]] ：
>如果问题 0 被解决了， 那么你可以获得 3 分，但你不能解决问题 1 和 2 。
>如果你跳过问题 0 ，且解决问题 1 ，你将获得 4 分但是不能解决问题 2 和 3 。
>请你返回这场考试里你能获得的 最高 分数。

    long long mostPoints(int** questions, int questionsSize, int* questionsColSize) {

        long long* dp = (long long*)malloc(questionsSize * sizeof(long long));
        memset(dp, 0, questionsSize * sizeof(long long));

        dp[questionsSize-1]=questions[questionsSize-1][0];

        for(int i=questionsSize-2;i>=0;i--){
            long long d0=0,skip=0;

            if(i+questions[i][1]+1>=questionsSize){ //line 13
                d0=questions[i][0];
            }else{
                d0=dp[i+questions[i][1]+1]+questions[i][0]; //line 16
            }
            skip=dp[i+1];

            dp[i]=d0>skip?d0:skip;
        }

        long long ans =dp[0];
        for(int i=0;i<questionsSize;i++){
            ans=ans>dp[i]?ans:dp[i];
        }
        return ans;
    }
  

首先是注意13行和16行的索引    
索引最后不+1的话 在13行处不加会导致越界 因为i+questions[i][1]可能刚好等于questionsSize+1，就导致16行的dp[i+questions[i][1]+1]越界    
在16行要+1 举个例子说明    
[[3,2],[4,3],[4,4],[2,5]]  计算dp[0]时 i=0  questions[0][1]=2  也就是说第3题是要跳过的 不+1的话就跳不过去

然后是dp的状态转移方程  要把重点着眼在**状态**上  只关心状态 
    
最后是注意dp的初始化和遍历方向 反向遍历要比正向简单的多  

总体来说 本题的思路是  
（dp[i]从题目i开始考试能得到的最高分数）
从后往前遍历 只剩最后一题-->直接作答即可  
对于某题目i 考虑两种情况  
1：作答 得分为本题分数和跳过数题后在i+skip开始考试得到的最高分数（d0）  
2：跳过 得分与下一个状态dp[i+1]相同(skip)

<a name="coinChange"></a>

### 322 零钱兑换
>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
>
>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。
>
>你可以认为每种硬币的数量是无限的。

    int coinChange(int* coins, int coinsSize, int amount) {

        int* dp = (int*)malloc(sizeof(int) * (amount + 1));
        memset(dp, 0x3f, sizeof(int) * (amount + 1));

        dp[0] = 0;

        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coinsSize; j++) {
                if (i >= coins[j]) {
                    dp[i] =
                        dp[i] < dp[i - coins[j]] + 1 ? dp[i] : dp[i - coins[j]] + 1;
                }
            }
        }

        int result = dp[amount] == 0x3f3f3f3f ? -1 : dp[amount];
        free(dp);
        return result;
    }

memset(dp, 0x3f, sizeof(int) * (amount + 1))   
这行代码将 dp 数组的每个字节都设置为 0x3f。  
由于 dp 数组是 int 类型的数组，每个元素占用 4 个字节，因此每个 int 元素的值将被设置为 0x3f3f3f3f

状态转移的抽象思路是比较容易得到的 就是具体的实现细节需要注意

状态转移说明
dp[i]代表金额i所需最少硬币数
某个金额amount 可以由amount-1 amount-2 amount-5 转移过来  
选择其中最小的即可

<a name="goodString"></a>

### 2466 统计构造好字符串的方案数
>给你整数 zero ，one ，low 和 high ，我们从空字符串开始构造一个字符串，每一步执行下面操作中的一种：
>
>将 '0' 在字符串末尾添加 zero  次。
>将 '1' 在字符串末尾添加 one 次。
>以上操作可以执行任意次。
>
>如果通过以上过程得到一个 长度 在 low 和 high 之间（包含上下边界）的字符串，那么这个字符串我们称为 好 字符串。
>
>请你返回满足以上要求的 不同 好字符串数目。由于答案可能很大，请将结果对 109 + 7 取余 后返回。

    int countGoodStrings(int low, int high, int zero, int one) {
        int* dp = (int*)malloc(sizeof(int) * (high + 1));
        memset(dp, 0, sizeof(int) * (high + 1));

        dp[0]=1;

        for (int i = 1; i <= high; i++) {
            if (i >= zero ) {
                dp[i] = (dp[i - zero] + dp[i])%1000000007;
            }
            if (i >= one && dp[i - one] != 0x3f3f3f3f) {
                dp[i] = (dp[i - one] + dp[i])%1000000007;
            }
        }

        int ans = 0;
        for (int i = low; i <= high; i++) {
            ans = (ans + dp[i]) % 1000000007;
        }
        return ans;
    }

翻译：每次可以爬 zero 或 one 个台阶，返回爬 low 到 high 个台阶的方案数。  
dp[i]表示长为i的字符串的构造数  
状态转移：  
如果 i≥zero，那么可以在长为 i−zero 的字符串末尾添加 zero 个 0，方案数为 dp[i−zero]。
如果 i≥one，那么可以在长为 i−one 的字符串末尾添加 one 个 1，方案数为 dp[i−one]。  
两类方案互斥（第 i 个字符不能既是 0 又是 1）,用加法原理，dp[i]=dp[i-zero]+dp[i-one]

Q:为什么是`dp[i] = (dp[i - zero/one] + dp[i])%1000000007;`
A:某个长度的字符串可能同时由dp[i-zero]和dp[i-one]转移来 此时其构造数为dp[i-zero]+dp[i-one] dp[i]初始化值为0 故而这样能得到正确答案

<a name="numSquare"></a>

### 279 完全平方数
>给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
>
>完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

    int numSquares(int n) {
        int dp[n + 1];
        for (int i = 0; i <= n; i++) {
            dp[i] = INT_MAX;
        }
        dp[0] = 0;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j * j <= i; j++) {
                dp[i] = fmin(dp[i], dp[i - j * j] + 1);
            }
        }

        return dp[n];
    }

最初的思路是正序判断`dp[i+j*j]`得到后面的dp值 但是具体实现想不出来（）   
将dp初始化设置为INT_MAX是为了接下来配合fmin使用
状态转移思路：dp[i]表示和为i的完全平方数最少数量  
某个数字i可以是由 i-某个小于i的完全平方数(j*j<i)转移得来  在其中找最小的即可




<button onclick="topFunction()" id="topBtn" title="Go to top">Top</button>

<style>
#topBtn {
  display: none; /* 隐藏按钮 */
  position: fixed; /* 固定位置 */
  bottom: 20px; /* 距离底部20px */
  right: 30px; /* 距离右侧30px */
  z-index: 99; /* 确保按钮在最前面 */
  border: none; /* 无边框 */
  outline: none; /* 无轮廓 */
  background-color: #555; /* 背景颜色 */
  color: white; /* 字体颜色 */
  cursor: pointer; /* 鼠标指针 */
  padding: 15px; /* 内边距 */
  border-radius: 10px; /* 圆角 */
}

#topBtn:hover {
  background-color: #333; /* 鼠标悬停时的背景颜色 */
}
</style>

<script>
// 当用户向下滚动 20px 时，显示按钮
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
    document.getElementById("topBtn").style.display = "block";
  } else {
    document.getElementById("topBtn").style.display = "none";
  }
}

// 当用户点击按钮时，回到顶部
function topFunction() {
//   document.body.scrollTop = 0; // For Safari
//   document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    window.scrollTo({ top: 0, behavior: 'smooth' });
}
</script>