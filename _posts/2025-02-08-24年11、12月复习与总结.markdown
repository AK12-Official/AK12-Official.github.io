---
layout: post
title: "24年11、12月复习与总结"
date:  2025-02-08 22:05:00 +0800
categories: jekyll update
---  

## LeetCode

***

### 写在前面的后记：
重点领会一下题目  
* [1：哈希表](#the1)
* [2：链表](#the2)
* [3：滑动窗口](#the3)
* [4：二分查找](#the4)
* [412：Arraylist](#the412)

***

### 383.赎金信
> 给你两个字符串*ransomNote*和*magazine*，判断*ransomNote*能不能由*magazine*里面的字符构成。如果可以，返回 *true* ；否则返回*false*。*magazine*中的每个字符只能在 ransomNote 中使用一次。  

    int r = strlen(ransomNote);
    int m = strlen(magazine);
    if (m < r)
        return false;
    int chart[26] = {0};
    for (int i = 0; i < m; i++)
    {
        chart[magazine[i] - 'a']++;
    }
    for (int i = 0; i < r; i++)
    {
        chart[ransomNote[i] - 'a']--;
    }
    for (int i = 0; i < 26; i++)
    {
        if (chart[i] < 0)
            return false;
    }
    return true;  

思路是利用数组创建字典，存储的值作为字符出现次数，很简单，不多提。  

### 876.链表的中间结点  
> 给你单链表的头结点 head ，请你找出并返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。  
> 
    struct ListNode {
    int val;
    struct ListNode *next;
    };
    typedef struct ListNode ListNode;
    struct ListNode* middleNode(struct ListNode* head) {
        int depth=0;ListNode* temp=head;
        while(temp!=NULL)
        {
            temp=temp->next;
            depth++;
            if(depth%2==0&&head!=NULL)head=head->next;
        }
        return head;
    }  

本质上是快慢指针的方法，快指针(head)走两步慢指针(head)走一步。  

<a name="the412"></a>

### 412.Fizz Buzz
> 给你一个整数 n ，找出从 1 到 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：answer[i] == "FizzBuzz" 如果 i 同时是 3 和 5 的倍数。answer[i] == "Fizz" 如果 i 是 3 的倍数。answer[i] == "Buzz" 如果 i 是 5 的倍数。answer[i] == i （以字符串形式）如果上述条件全不满足。  
> 
    List<String> ans=new ArrayList();
    for(int i=1;i<=n;i++){
        if(i%15==0){
            ans.add("FizzBuzz");
        }else if(i%3==0){
            ans.add("Fizz");
        }else if(i%5==0){
            ans.add("Buzz");
        }
        else{
            String temp=i+"";
            ans.add(temp);
        }
    }
    return ans;  

1. 一个简单的toString方法 `temp=i+""`  
2. List、ArrayList 等方法不很熟练，贴个文档复习 [ArrayList](https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/util/ArrayList.html)  

### 1342.数字变成0所需的次数
本题过于简单故不多做赘述，后来使用了dp方法重解了该题  

### 1480.一维数组的动态和
> 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。请返回 nums 的动态和。  
> 示例 1：  
> 输入：nums = [1,2,3,4]  
> 输出：[1,3,6,10]  
> 解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 
> 
    int* runningSum(int* nums, int numsSize, int* returnSize) {
        *returnSize=numsSize;
        for(int i=1;i<numsSize;i++)
        {
            nums[i]+=nums[i-1];
        }

        return nums;
    }

1. 算是很简单的dp，其实没有什么值得记录的
2. `*returnSize=numsSize;`这一行很重要，不加的话返回的数组为空，具体是为什么还不太清楚  

### 1672.最富有客户端资产总量
>给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i​​​​​​​​​​​​ 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。  
客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。

    int maximumWealth(int** accounts, int accountsSize, int* accountsColSize) {
        int Max=0;
        int m=accountsSize;
        int n=*accountsColSize;
        for(int i=0;i<m;i++)
        {
            int sum=0;
            for(int j=0;j<n;j++)
            {
                sum+=accounts[i][j];
            }
            Max=Max>sum?Max:sum;
        }
        return Max;
    }

很简单的二维数组题。accountsSize是行数，colSize是列数。  
<a name="the1"></a>

### 1.两数之和
> 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。  
> 你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。  
> 你可以按任意顺序返回答案。

解法一

    for(int i=0;i<numsSize;i++)
    {
        for(int j=i+1;j<numsSize;j++)
        {
            if((i!=j)&&(nums[i]+nums[j]==target))
            {
                int* ret = malloc(sizeof(int) * 2);
                *returnSize=2;
                ret[0] = i, ret[1] = j;
                return ret;
            }
        }
    }
    *returnSize=0;
    return NULL;

很简单的暴力查找 没什么好说的 注意题目要求返回数组即可  

解法二

    #include "uthash.h"
    #include <stdlib.h>
    struct hashTable {
        int key;
        int val;
        UT_hash_handle hh;
    };
    struct hashTable* hashtable;
    struct hashTable* find(int ikey) {
        struct hashTable* tmp;
        HASH_FIND_INT(hashtable, &ikey, tmp);
        return tmp;
    }
    void insert(int ikey, int ival) {
        struct hashTable* it = find(ikey);
        if (it == NULL) {
            struct hashTable* tmp = malloc(sizeof(struct hashTable));
            tmp->key = ikey, tmp->val = ival;
            HASH_ADD_INT(hashtable, key, tmp);
        } else {
            it->val = ival;
        }
    }
    int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
        hashtable = NULL;
        for (int i = 0; i < numsSize; i++) {
            struct hashTable* it = find(target - nums[i]);
            if (it != NULL) {
                int* ret = malloc(sizeof(int) * 2);
                ret[0] = it->val, ret[1] = i;
                *returnSize = 2;
                return ret;
            }
            insert(nums[i], i);
        }
        *returnSize = 0;
        return NULL;
    }

使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。  
这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。  
代码工作原理:
    
    哈希表结构定义：
    struct hashTable 定义了哈希表的结构，包含键 key 和值 val，以及用于哈希表操作的句柄 UT_hash_handle hh。
    
    查找函数 find：
    find 函数用于在哈希表中查找键为 ikey 的元素。如果找到，返回该元素的指针；否则返回 NULL。
    
    插入函数 insert：
    insert 函数用于向哈希表中插入键值对 (ikey, ival)。如果键 ikey 已存在，则更新其值为 ival；否则，创建一个新的哈希表元素并插入。
    
    主函数 twoSum：
    twoSum 函数用于在数组 nums 中查找和为 target 的两个数的下标。
    初始化哈希表 hashtable 为 NULL。
    遍历数组 nums，对于每个元素 nums[i]，查找哈希表中是否存在键为 target - nums[i] 的元素。如果找到，说明存在两个数的和为 target，返回这两个数的下标。
    如果未找到，向哈希表中插入当前数 nums[i] 及其索引 i。
    如果遍历完数组仍未找到满足条件的两个数，返回 NULL 并将 returnSize 设为 0。
代码示例：
    假设输入数组 nums = [2, 7, 11, 15]，目标值 target = 9：

    初始化哈希表。
    遍历数组：
    i = 0，nums[0] = 2，查找哈希表中是否存在 9 - 2 = 7，未找到，插入 (2, 0)。
    i = 1，nums[1] = 7，查找哈希表中是否存在 9 - 7 = 2，找到，返回 [0, 1]。
    最终返回 [0, 1]，表示数组中下标为 0 和 1 的两个数 2 和 7 的和为 9。

[关于uthash.h](https://zhuanlan.zhihu.com/p/340692819)  
**关于哈希表部分学艺不精，故将代码和详解都详细的贴了出来供复习**
<a name="the2"></a>

### 2.两数相加
>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。  
请你将两个数相加，并以相同形式返回一个表示和的链表。  
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。  

    #include <stdlib.h>
    struct ListNode {
        int val;
        struct ListNode *next;
    };
    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
        struct ListNode *head = NULL, *tail = NULL;
        int carry = 0;
        while (l1 || l2) {
            int n1 = l1 ? l1->val : 0;
            int n2 = l2 ? l2->val : 0;
            int sum = n1 + n2 + carry;
            if (!head) {
                head = tail = malloc(sizeof(struct ListNode));
                tail->val = sum % 10;
                tail->next = NULL;
            } else {
                tail->next = malloc(sizeof(struct ListNode));
                tail->next->val = sum % 10;
                tail = tail->next;
                tail->next = NULL;
            }
            carry = sum / 10;
            if (l1) {
                l1 = l1->next;
            }
            if (l2) {
                l2 = l2->next;
            }
        }
        if (carry > 0) {
            tail->next = malloc(sizeof(struct ListNode));
            tail->next->val = carry;
            tail->next->next = NULL;
        }
        return head;
    }

思路和具体实现都不算很难，用作复习链表

<a name="the3"></a>

### 3.无重复字符的最长字串
>给定一个字符串 s ，请你找出其中不含有重复字符的**最长**子串的长度。

    int ans = 0, left = 0;
    bool has[128] = {};
    for (int right = 0; s[right]; right++) 
    {
        char c = s[right];
        while (has[c]) 
        { // 窗口内有 c
        has[s[left]] = false;
        left++; // 缩小窗口
        }
        has[c] = true;
        ans=ans>right-left+1?ans:right-left+1;
    }
    return ans;

[滑动窗口算法](https://www.bilibili.com/video/BV1hd4y1r7Gq/?vd_source=0437aa3fbc324cf2cc3e7f8ca395e67c)  

具体步骤如下：  
滑动窗口：使用滑动窗口技术来解决这个问题。滑动窗口通过两个指针（left 和 right）来维护一个窗口，窗口内的字符是当前正在检查的子串。  
初始化：定义变量 ans 用于存储最长子串的长度，left 用于指向窗口的左边界，has 数组用于记录窗口内字符是否存在。  
遍历字符串：使用 right 指针遍历字符串 s。  
对于每个字符 s[right]，检查 has 数组中是否已经存在该字符。
如果存在（即 has[c] 为 true），则说明当前窗口内有重复字符，需要缩小窗口。通过移动 left 指针并将 has[s[left]] 置为 false 来缩小窗口，直到窗口内没有重复字符。
将当前字符 s[right] 标记为存在（即 has[c] 置为 true）。
更新最长子串的长度 ans。
返回结果：遍历结束后，返回最长子串的长度 ans。  
通过这种方式，可以在一次遍历中找到无重复字符的最长子串，时间复杂度为 O(N)。
<a name="the4"></a>

### 4.寻找两个正数数组的中位数
>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。  
算法的时间复杂度应该为 O(log (m+n)) 

    double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
        if (nums1Size > nums2Size) {
            return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
        }
    
        int x = nums1Size;
        int y = nums2Size;
        int low = 0, high = x;
    
        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;
    
            int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];
            int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];
    
            int minX = (partitionX == x) ? INT_MAX : nums1[partitionX];
            int minY = (partitionY == y) ? INT_MAX : nums2[partitionY];
    
            if (maxX <= minY && maxY <= minX) {
                if ((x + y) % 2 == 0) {
                    return ((double)fmax(maxX, maxY) + fmin(minX, minY)) / 2;
                } else {
                    return (double)fmax(maxX, maxY);
                }
            } else if (maxX > minY) {
                high = partitionX - 1;
            } else {
                low = partitionX + 1;
            }
        }
    
        return -1; // Should never reach here
    }

思路  

确保第一个数组长度不大于第二个数组：  
如果 nums1 的长度大于 nums2，交换它们，以确保 nums1 是较短的数组。这是为了减少二分查找的范围，提高效率。

初始化二分查找的范围：  
low 和 high 分别初始化为 0 和 nums1 的长度。

进行二分查找：  
在 low 小于等于 high 的条件下，进行循环。
计算 partitionX 和 partitionY，分别表示 nums1 和 nums2 的分割位置。partitionX 是 nums1 的中间位置，partitionY 是根据总长度和 partitionX 计算出来的。

获取分割位置的最大值和最小值：  
maxX 和 maxY 分别是 nums1 和 nums2 分割位置左侧的最大值。
minX 和 minY 分别是 nums1 和 nums2 分割位置右侧的最小值。
如果分割位置在数组的边界上，使用 INT_MIN 或 INT_MAX 作为边界值。

检查是否找到正确的分割位置：  
如果 maxX <= minY 且 maxY <= minX，说明找到了正确的分割位置。
如果两个数组的总长度是偶数，中位数是左侧最大值和右侧最小值的平均值。
如果总长度是奇数，中位数是左侧最大值。

调整二分查找的范围：  
如果 maxX > minY，说明 partitionX 太大，需要向左移动，即 high = partitionX - 1。
如果 maxY > minX，说明 partitionX 太小，需要向右移动，即 low = partitionX + 1

二分查找只去寻找partitionX，因为partitionY是基于X计算的，只要找到的分割线符合最终条件（中位数分割线）就可以进行返回
[可以去看看题解视频 ](https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/258842/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/)

### 9.回文数
题目很简单 不贴题目了 但是题解的解法很妙 记录一下  

    class Solution {
        public boolean isPalindrome(int x) {
            // 特殊情况：
            // 如上所述，当 x < 0 时，x 不是回文数。
            // 同样地，如果数字的最后一位是 0，为了使该数字为回文，
            // 则其第一位数字也应该是 0
            // 只有 0 满足这一属性
            if (x < 0 || (x % 10 == 0 && x != 0)) {
                return false;
            }
    
            int revertedNumber = 0;
            while (x > revertedNumber) {
                revertedNumber = revertedNumber * 10 + x % 10;
                x /= 10;
            }
    
            // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
            // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
            // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
            return x == revertedNumber || x == revertedNumber / 10;
        }
    }

## 洛谷

### 一道简单题
>将 1,2,…,9共9个数分成3组，分别组成3个三位数，且使这3个三位数构成1:2:3的比例  
试求出所有满足条件的 3 个三位数。

    int main() {
        for (int i = 100; i < 1000; i++) {
            int c = i;
            if (c % 10 == c / 10 % 10) continue;
            if (c / 10 % 10 == c / 100) continue;
            if (c % 10 == c / 100) continue;
    
            int a = 2 * i;
            int b = 3 * i;
            int d[10] = {0};
            int temp = c;
    
            for (int j = 0; j < 3; j++) {
                d[temp % 10]++;
                temp /= 10;
            }
            temp = a;
            for (int j = 0; j < 3; j++) {
                d[temp % 10]++;
                temp /= 10;
            }
            temp = b;
            for (int j = 0; j < 3; j++) {
                d[temp % 10]++;
                temp /= 10;
            }
    
            int mark = 1;
            for (int j = 1; j < 10; j++) {
                if (d[j] == 0)
                    mark = 0;
            }
            if (mark)
                printf("%d %d %d\n", i, a, b);
        }
    
        return 0;
    }

很简单的暴力枚举，没什么好说的。边界条件也可以再优化一下到 `1000/6`   

<button onclick="topFunction()" id="topBtn" title="Go to top">Top</button>

<style>
#topBtn {
  display: none; /* 隐藏按钮 */
  position: fixed; /* 固定位置 */
  bottom: 20px; /* 距离底部20px */
  right: 30px; /* 距离右侧30px */
  z-index: 99; /* 确保按钮在最前面 */
  border: none; /* 无边框 */
  outline: none; /* 无轮廓 */
  background-color: #555; /* 背景颜色 */
  color: white; /* 字体颜色 */
  cursor: pointer; /* 鼠标指针 */
  padding: 15px; /* 内边距 */
  border-radius: 10px; /* 圆角 */
}

#topBtn:hover {
  background-color: #333; /* 鼠标悬停时的背景颜色 */
}
</style>

<script>
// 当用户向下滚动 20px 时，显示按钮
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
    document.getElementById("topBtn").style.display = "block";
  } else {
    document.getElementById("topBtn").style.display = "none";
  }
}

// 当用户点击按钮时，回到顶部
function topFunction() {
  document.body.scrollTop = 0; // For Safari
  document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
}
</script>