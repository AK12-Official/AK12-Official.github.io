---
layout: post
title: "25年3月复习与总结"
date:  2025-03-14 20:00:00 +0800
categories: jekyll update
---  

**重点题目**

* [每一个查询的最大美丽值](#MaxBeauty)
* [水果成篮](#Fruit)
* [删除子数组的最大得分](#BiggestPoint)
* [最多K个重复元素的最长子数组](#KRepeat)

## Week 1

### 91.解码方法

>一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：  
"1" -> 'A'  
"2" -> 'B'  
...  
"25" -> 'Y'  
"26" -> 'Z'  
然而，在 解码 已编码的消息时，你意识到有许多不同的方式来解码，因为有些编码被包含在其它编码当中（"2" 和 "5" 与 "25"）。  
例如，"11106" 可以映射为：  
"AAJF" ，将消息分组为 (1, 1, 10, 6)  
"KJF" ，将消息分组为 (11, 10, 6)  
消息不能分组为  (1, 11, 06) ，因为 "06" 不是一个合法编码（只有 "6" 是合法的）。  
注意，可能存在无法解码的字符串。  
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。如果没有合法的方式解码整个字符串，返回 0。  
题目数据保证答案肯定是一个 32 位 的整数。

``` C
int numDecodings(char* s) {
    int len=strlen(s);

    int dp[len+1];
    dp[0]=1;
    if(s[0]!='0'){
        dp[1]=1;
    }else{
        dp[1]=0;
    }

    for(int i=2;i<=len;i++){
        int before=(int)(s[i-2])-48;
        int now=(int)(s[i-1])-48;
        if(now==0){
            //不能单独解码 
            if(before==1||before==2){
                dp[i]=dp[i-2];  //能配合上一位解码
            }else{
                dp[i]=0;        //不能配合上一位解码
            }
        }else{
            //能单独解码
            if(before==1||(before==2&&now<=6)){
                dp[i]=dp[i-1]+dp[i-2];  //能配合上一位解码
            }else{
                dp[i]=dp[i-1];          //不能配合上一位解码
            }
        }
    }
    return dp[len];
}
```

有点太过久远以至于不太有印象了，不过看起来并不很难

### 518.零钱兑换II

>给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。  
请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。  
假设每一种面额的硬币有无限个。
题目数据保证结果符合 32 位带符号整数。

``` C
int change(int amount, int* coins, int coinsSize) {
    
    unsigned int *dp = (unsigned int *)malloc(sizeof(unsigned int) * (amount + 1));
    memset(dp, 0, sizeof(unsigned int) * (amount + 1));

    dp[0] = 1;

    for(int j=0; j<coinsSize; j++)
    {
        for(int i=1; i<=amount; i++)
        {
            if(i-coins[j] >= 0)
            {
                dp[i] += dp[i-coins[j]];
            }
        }
    }

    return (unsigned int)dp[amount];
}
```

刷题刷的这种题目的思路比较好想了，略有题感了，不多说

### 2841.几乎唯一子数组最大和

>给你一个整数数组 nums 和两个正整数 m 和 k 。  
请你返回 nums 中长度为 k 的 几乎唯一 子数组的 最大和 ，如果不存在几乎唯一子数组，请你返回 0 。  
如果 nums 的一个子数组有至少 m 个互不相同的元素，我们称它是 几乎唯一 子数组。  
子数组指的是一个数组中一段连续 非空 的元素序列。

``` Java
class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
        long maxSum = 0;
        long currentSum = 0;
        Map<Integer, Integer> countMap = new HashMap<>();

        for (int i = 0; i < nums.size(); i++) {
            if (i >= k) {
                currentSum -= nums.get(i - k);
                countMap.put(nums.get(i - k), countMap.get(nums.get(i - k)) - 1);
                if (countMap.get(nums.get(i - k)) == 0) {
                    countMap.remove(nums.get(i - k));
                }
            }

            currentSum += nums.get(i);
            countMap.put(nums.get(i), countMap.getOrDefault(nums.get(i), 0) + 1);

            if (i >= k - 1 && countMap.size() >= m) {
                maxSum = Math.max(maxSum, currentSum);
            }
        }
        return maxSum;
    }
}
```

利用哈希表做去重的滑动窗口，滑窗的思路比较固定，生成窗口，扩展，窗口被破坏，收缩，不多说

<a name="MaxBeauty"></a>

### 2070.每一个查询的最大美丽值

>给你一个二维整数数组 items ，其中 items[i] = [pricei, beautyi] 分别表示每一个物品的 价格 和 美丽值 。  
同时给你一个下标从 0 开始的整数数组 queries 。对于每个查询 queries[j] ，你想求出价格小于等于 queries[j] 的物品中，最大的美丽值 是多少。如果不存在符合条件的物品，那么查询的结果为 0 。  
请你返回一个长度与 queries 相同的数组 answer，其中 answer[j]是第 j 个查询的答案

``` C
#define INDEX_PRICE 0
#define INDEX_BEAUTY 1

int compare(const void* a, const void* b) {
    return (*(int**)a)[INDEX_PRICE] - (*(int**)b)[INDEX_PRICE];
}

int* maximumBeauty(int** items, int itemsSize, int* itemsColSize, int* queries,
                   int queriesSize, int* returnSize) {
    *returnSize = queriesSize;
    int* ret = (int*)malloc(sizeof(int) * queriesSize);
    int* maxBeauty = (int*)malloc(sizeof(int) * itemsSize);

    qsort(items, itemsSize, sizeof(int*), compare);

    maxBeauty[0] = items[0][INDEX_BEAUTY];
    for (int i = 1; i < itemsSize; i++) {
        maxBeauty[i] = maxBeauty[i - 1] > items[i][INDEX_BEAUTY]
                           ? maxBeauty[i - 1]
                           : items[i][INDEX_BEAUTY];
    }

    for (int i = 0; i < queriesSize; i++) {
        int left = 0;
        int right = itemsSize - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (queries[i] >= items[mid][INDEX_PRICE]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        ret[i] = right >= 0 ? maxBeauty[right] : 0;
    }

    free(maxBeauty);
    return ret;
}
```

解题思路：**排序 & 二分，值得一看**

## Week 2

### 长度为k子数组中的最大和

>给你一个整数数组 nums 和一个整数 k 。请你从 nums 中满足下述条件的全部子数组中找出最大子数组和：  
子数组的长度是 k，且  
子数组中的所有元素 各不相同 。  
返回满足题面要求的最大子数组和。如果不存在子数组满足这些条件，返回 0 。
子数组 是数组中一段连续非空的元素序列。

``` Java
class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        long maxSum=0;
        long currentSum=0;
        Map<Integer,Integer>countMap=new HashMap();

        for(int i=0;i<nums.length;i++){
            if(i>=k){
                currentSum -= nums[i-k];
                countMap.put(nums[i-k], countMap.get(nums[i-k]) - 1);
                if (countMap.get(nums[i-k]) == 0) {
                    countMap.remove(nums[i-k]);
                }
            }
            currentSum += nums[i];
            countMap.put(nums[i], countMap.getOrDefault(nums[i], 0) + 1);

            if (i >= k - 1 && countMap.size() >= k) {
                maxSum = Math.max(maxSum, currentSum);
            }
        }
        return maxSum;
    }
}
```

通过类似的窗口题目基本熟悉了Java HashMap的基本操作，但是感觉**还需要加强**

### 1423. 可获得的最大点数

>几张卡牌 排成一行，每张卡牌都有一个对应的点数。点数由整数数组 cardPoints 给出。  
每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 k 张卡牌。  
你的点数就是你拿到手中的所有卡牌的点数之和。  
给你一个整数数组 cardPoints 和整数 k，请你返回可以获得的最大点数。

``` C
int maxScore(int* cardPoints, int cardPointsSize, int k) {
    if(k==cardPointsSize){
        int sum=0;
        for(int i=0;i<cardPointsSize;i++){
            sum+=cardPoints[i];
        }
        return sum;
    }else{
        int sum=0;
        for(int i=0;i<k;i++){
            sum+=cardPoints[i];
        }
        int temp=sum;
        for(int i=k-1;i>=0;i--){
            temp=temp-cardPoints[i]+cardPoints[cardPointsSize-(k-i)];
            sum=sum>temp?sum:temp;
        }
        return sum;
    }
}
```

老滑窗了，忽略

### 1652.拆炸弹
>
>你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。  
为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。
如果 k > 0 ，将第 i 个数字用 接下来 k 个数字之和替换。  
如果 k < 0 ，将第 i 个数字用 之前 k 个数字之和替换。  
如果 k == 0 ，将第 i 个数字用 0 替换。  
由于 code 是循环的， code[n-1] 下一个元素是 code[0] ，且 code[0] 前一个元素是 code[n-1] 。  
给你 循环 数组 code 和整数密钥 k ，请你返回解密后的结果来拆除炸弹！

``` C
int *decrypt(int *code, int codeSize, int k, int *returnSize)
{
    *returnSize = codeSize;
    int *ret = (int *)malloc(sizeof(int) * codeSize);
    memset(ret, 0, sizeof(int) * codeSize);
    if (k == 0)
    {
        for (int i = 0; i < codeSize; i++)
        {
            ret[i] = 0;
        }
        return ret;
    }
    else if (k > 0)
    {
        int sum = 0;
        for (int i = 0; i < k; i++)
        {
            sum += code[i];
        }
        for (int i = 0; i < codeSize; i++)
        {
            // 将sum赋值给某元素
            ret[(codeSize - 1 + i) % codeSize] = sum;
            // 修改sum的值
            sum = sum - code[i] + code[(i + k) % codeSize];
        }
    }
    else
    {
        int sum = 0;
        k = -k;
        for (int i = 0; i < k; i++)
        {
            sum += code[i];
        }
        for (int i = 0; i < codeSize; i++)
        {
            // 将sum赋值给某元素
            ret[(i+k)%codeSize]=sum;
            // 修改sum的值
            sum = sum - code[i] + code[(i + k) % codeSize];
        }
    }
    return ret;
    //根本没南渡 O(n)
}
```

很简单的滑窗，不过要优化时间复杂度到O(n),不过也不算很难，上面就是O(n)版本

### 3090.每个字符最多出现两次的最长字符串
>
>给你一个字符串 s ，请找出满足每个字符最多出现两次的最长子字符串，并返回该子字符串的 最大 长度

``` C
int maximumLengthSubstring(char* s) {
    int has[128]={0};
    int left=0,ans=0;

    for(int right=0;s[right];right++){
        char c=s[right];
        has[c]++;
        while(has[c]>2){
            has[s[left]]--;
            left++;
        }
        ans=ans>right-left+1?ans:right-left+1;
    }
    return ans;
}
```

简单题，不多说

### 1439.删掉一个元素以后全为1的最长子数组
>
>给你一个二进制数组 nums ，你需要从中删掉一个元素。  
请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。  
如果不存在这样的子数组，请返回 0 。

``` C
int longestSubarray(int *nums, int numsSize)
{
    int ZeroCount = 0;
    int left = 0, right = 0;
    int ans = 0;

    for(right=0;right<numsSize;right++){
        if(nums[right]==0){
            ZeroCount++;
        }
        while(ZeroCount>1){
            if(nums[left]==0){
                ZeroCount--;
            }
            left++;
        }
        ans=ans>right-left?ans:right-left;
    }
    return ans;
}
```

不要被题目的执行流忽悠到了，其实就是去找一个最多有1个0的子数组的长度

### 1208.尽可能使字符串相等

>给你两个长度相同的字符串，s 和 t。  
将 s 中的第 i 个字符变到 t 中的第 i 个字符需要 |s[i] - t[i]| 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。  
用于变更字符串的最大预算是 maxCost。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。  
如果你可以将 s 的子字符串转化为它在 t 中对应的子字符串，则返回可以转化的最大长度。  
如果 s 中没有子字符串可以转化成 t 中对应的子字符串，则返回 0。

``` C
int equalSubstring(char* s, char* t, int maxCost) {
    int realCost=0;

    int left=0,right=0;
    int ans=0;

    for(right;s[right];right++){
        realCost+=abs(s[right]-t[right]);
        while(realCost>maxCost){
            realCost-=abs(s[left]-t[left]);
            left++;
        }
        ans=ans>right-left+1?ans:right-left+1;
    }
    return ans;
}
```

实质是在找一个，修改开销小于预算的窗口，并且要该窗口尽可能长

<a name="Fruit"></a>

### 904.水果成篮

>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。  
你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：  
你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。  
你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。  
一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。  
给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。

``` Java
class Solution {
    public int totalFruit(int[] fruits) {
        Map<Integer, Integer> map = new HashMap<>();

        int left = 0;
        int ans = 0;
        for (int right = 0; right < fruits.length; right++) {
            map.put(fruits[right], map.getOrDefault(fruits[right], 0) + 1);
            while (map.size() > 2) {
                map.put(fruits[left], map.get(fruits[left]) - 1);
                if (map.get(fruits[left]) == 0) {
                    map.remove(fruits[left]);
                }
                left++;
            }
            ans = ans > right - left + 1 ? ans : right - left + 1;
        }
        return ans;

        // Map<Integer, Integer> map = new HashMap<>();

        // int left = 0;
        // int ans = 0;
        // for (int right = 0; right < fruits.length; right++) {
        //     map.put(fruits[right], map.getOrDefault(fruits[right], 0) + 1);
        //     while (map.size() > 2) {
        //         map.put(fruits[left], map.get(fruits[left]) - 1);
        //         if (map.get(fruits[left]) == 0) {
        //             map.remove(fruits[left]);
        //         }
        //         left++;
        //     }
        //     ans = Math.max(ans, right - left + 1);
        // }
        // return ans;
    }
}
```

仍然是对Java哈希表的应用，值得一看

## Week 3

本周在LeetCode中对SQL语句进行了定向训练，不在这里做记录了

## Week 4

<a name="BiggestPoint"></a>

### 1695.删除子数组的最大得分

>给你一个正整数数组 nums ，请你从中删除一个含有 若干不同元素 的子数组。删除子数组的 得分 就是子数组各元素之 和 。  
返回 只删除一个 子数组可获得的 最大得分 。  
如果数组 b 是数组 a 的一个连续子序列，即如果它等于 a[l],a[l+1],...,a[r] ，那么它就是 a 的一个子数组。

``` Java
    class Solution {
        public int maximumUniqueSubarray(int[] nums) {
            int Maxsum=0;
            int CurrentSum=0;
            Map<Integer,Integer> countMap=new HashMap<>();

            int left=0,right=0;
            for(right=0;right<nums.length;right++){
                while(countMap.getOrDefault(nums[right],0)>=1){//如果有重复元素
                    //缩小窗口
                    countMap.remove(nums[left]);
                    CurrentSum-=nums[left];
                    left++;
                }
                countMap.put(nums[right],1);
                CurrentSum += nums[right];
                Maxsum=Maxsum>CurrentSum?Maxsum:CurrentSum;
            }
            return Maxsum;
        }
    }
```

<a name="KRepeat"></a>

### 2958.最多K个重复元素的最长子数组

>给你一个整数数组 nums 和一个整数 k 。  
一个元素 x 在数组中的 频率 指的是它在数组中的出现次数。  
如果一个数组中所有元素的频率都 小于等于 k ，那么我们称这个数组是 好 数组。  
请你返回 nums 中 最长好 子数组的长度。  
子数组 指的是一个数组中一段连续非空的元素序列。

```Java
class Solution {
    public int maxSubarrayLength(int[] nums, int k) {
        int left=0;
        int right =0;
        Map<Integer,Integer> count=new HashMap<>();

        int maxLength=0;
        for(right=0;right<nums.length;right++){
            count.put(nums[right],count.getOrDefault(nums[right],0)+1);
            while(count.getOrDefault(nums[right],0)>k){
                //缩小窗口
                count.put(nums[left],count.get(nums[left])-1);
                left++;
            }
            maxLength=right-left+1>maxLength?right-left+1:maxLength;
        }
        return maxLength;
    }
}
```

### 215.数组中的第K个最大元素

>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。  
请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。   
你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。

``` C
int findKthLargest(int* nums, int numsSize, int k) {
    // 先找一个元素进行分区 找到第x大
    int left = 0;
    int right = numsSize - 1;
    while (left <= right) {
        if (left == right)
            return nums[left];

        int pivotIndex = left + rand() % (right - left + 1);
        int pivot = nums[pivotIndex];
        nums[pivotIndex] = nums[left];
        nums[left] = pivot;

        // 分区
        int i = left;
        int j = right;
        while (i < j) {
            while (i < j && nums[j] >= pivot) // 不加等号就超时 估计是形成环路了
                j--;
            nums[i] = nums[j]; // 此时pivot在j处
            while (i < j && nums[i] <= pivot)
                i++;
            nums[j] = nums[i]; // 此时pivot在i处
        }
        nums[i] = pivot;

        if (numsSize - i == k)
            return nums[i];
        else if (numsSize - i > k)
            left = i + 1;
        else {
            right = i - 1;
            // k = k - (numsSize - i);
        }
    }
    return -1;
}
```

线性时间选择，不多说