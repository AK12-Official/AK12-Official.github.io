---
layout: post
title: "25年1月复习与总结"
date:  2025-02-14 22:05:00 +0800
categories: jekyll update
---  

## LeetCode Dynamic Programming

***
**需要重点复习的题目**
* [删除并获得点数](#DeleteAndEarn)
* [最大正方形](#MaxSquare)
* [最长回文子串](#longest)
* [合并区间](#Merge)


***
### 爬楼梯
### 斐波那契数
### 第N个泰伯那契数
三个最简单的斐波那契类型DP，不多说。
***
### 最小花费爬楼梯
>给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。  
你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。  
请你计算并返回达到楼梯顶部的最低花费。  

    int dp[costSize + 1];
        dp[0] = 0;
        dp[1] = 0;
    
        for (int i = 2; i <= costSize; i++) {
            dp[i] = (dp[i - 1] + cost[i - 1] < dp[i - 2] + cost[i - 2]) ? dp[i - 1] + cost[i - 1] : dp[i - 2] + cost[i - 2];
        }
    
        return dp[costSize];

简单的状态转换dp，不多说。不必多费心思。

### 打家劫舍
>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。  
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。  

    int *dp = (int *)malloc(sizeof(int) * numsSize);
    dp[0] = nums[0];
    dp[1] = nums[0] > nums[1] ? nums[0] : nums[1];
    for (int i = 2; i < numsSize; i++) {
        dp[i] = dp[i - 1] > dp[i - 2] + nums[i] ? dp[i - 1] : dp[i - 2] + nums[i];
    }
    return dp[numsSize - 1];


<a name="DeleteAndEarn"></a>

### 删除并获得点数 
>给你一个整数数组 nums ，你可以对它进行一些操作。  
每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于 nums[i] - 1 和 nums[i] + 1 的元素。  
开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。

    if(numsSize==0) return 0;
    if(numsSize==1) return nums[0];
    
    int max=0;
    for(int i=0;i<numsSize;i++){
        if(nums[i]>max) max=nums[i];
    }
    int *dp=(int *)malloc(sizeof(int)*(max+1));
    memset(dp,0,sizeof(int)*(max+1));
    for(int i=0;i<numsSize;i++){
        dp[nums[i]]+=nums[i];
    }
    int *dp2=(int *)malloc(sizeof(int)*(max+1));
    dp2[0]=0;
    dp2[1]=dp[1];
    for(int i=2;i<=max;i++){
        dp2[i]=dp2[i-1]>dp2[i-2]+dp[i]?dp2[i-1]:dp2[i-2]+dp[i];
    }
    return dp2[max];

实践发现不能简单的把数组排序后当成打家劫舍处理  
因为对于[3，1]这种数组吧，数组元素并不连续；但是排完序之后 数组元素就在内存空间中物理相邻连续了  
按打家劫舍处理就会导致打劫不连续  
按正确的方法应当把数组元素的值当成下标，然后对应的值当成打家劫舍的值  
也就是在中间插入0将其转换为打家劫舍问题  
就是说 数组中元素的值其实是房屋的编号，房屋的价值则由求和确定  

相邻值≈相邻房屋->触发警报  

### 不同路径
>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。  
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。  
问总共有多少条不同的路径？

    int dp[m][n];    memset(dp,0,sizeof(dp));
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(i==0 || j==0) dp[i][j] = 1;
            else
            dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }
    }
    return dp[m-1][n-1];

状态转移思路：机器人到达某格子，可能是从左边格移过来，也可能是从上边格移过来，到[i，j]的路径数就是到[i-1,j]路径数+[i，j-1]的路径数  
初始化：边界路径单一（直着下或直着右）

### 最小路径和
>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。  
说明：每次只能向下或者向右移动一步。

    int** dp;
    dp = (int**)malloc(sizeof(int*) * gridSize);
    for(int i = 0; i < gridSize; i++) {
        dp[i] = (int*)malloc(sizeof(int) * (*gridColSize));
        memset(dp[i], 0, sizeof(int) * (*gridColSize));
    }
    dp[0][0] = grid[0][0];
    for(int i = 1; i < gridSize; i++) {
        dp[i][0] = dp[i - 1][0] + grid[i][0];
    }
    for(int i = 1; i < *gridColSize; i++) {
        dp[0][i] = dp[0][i - 1] + grid[0][i];
    }
    for(int i = 1; i < gridSize; i++) {
        for(int j = 1; j < *gridColSize; j++) {
            dp[i][j] = fmin(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
        }
    }
    return dp[gridSize - 1][*gridColSize - 1];

状态转移思路及初始化与上题一致。  

### 不同路径II
>给定一个 m x n 的整数数组 grid。一个机器人初始位于 左上角（即 grid[0][0]）。机器人尝试移动到 右下角（即 grid[m - 1][n - 1]）。机器人每次只能向下或者向右移动一步。  
网格中的障碍物和空位置分别用 1 和 0 来表示。机器人的移动路径中不能包含 任何 有障碍物的方格。  
返回机器人能够到达右下角的不同路径数量。  
测试用例保证答案小于等于 2 * 109。

    int **dp;
    dp = (int **)malloc(sizeof(int *) * obstacleGridSize);
    for (int i = 0; i < obstacleGridSize; i++)
    {
        dp[i] = (int *)malloc(sizeof(int) * (*obstacleGridColSize));
        memset(dp[i], 0, sizeof(int) * (*obstacleGridColSize));
    }
    dp[0][0] = 1;
    if (obstacleGrid[0][0])dp[0][0] = 0;
    for (int i = 1; i < *obstacleGridColSize; i++)
    {
        if (obstacleGrid[0][i] == 1)
        {
            dp[0][i] = 0;
        }
        else
        {
            dp[0][i] = dp[0][i - 1];
        }
    }
    for (int i = 1; i < obstacleGridSize; i++)
    {
        if (obstacleGrid[i][0] == 1)
        {
            dp[i][0] = 0;
        }
        else
        {
            dp[i][0] = dp[i - 1][0];
        }
    }
    for (int i = 1; i < obstacleGridSize; i++)
    {
        for (int j = 1; j < *obstacleGridColSize; j++)
        {
            if (obstacleGrid[i][j])
                dp[i][j] = 0;
            else
            {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
    }
    return dp[obstacleGridSize - 1][*obstacleGridColSize - 1];

思路跟不同路径相似，唯一的区别在对边界的初始化上

### 三角形最小路径和
>给定一个三角形 triangle ，找出自顶向下的最小路径和。  
每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。

    int **dp;
    dp = (int**)malloc(sizeof(int*) * triangleSize);
    for (int i = 0; i < triangleSize; i++) {
        dp[i] = (int*)malloc(sizeof(int) * (triangleColSize[i]));
        memset(dp[i], 0, sizeof(int) * (triangleColSize[i]));
    }
    
    dp[0][0]=triangle[0][0];
    for(int i=1;i<triangleSize;i++){
        dp[i][0]=triangle[i][0]+dp[i-1][0];
    }
    for(int i=1;i<triangleSize;i++){
        for(int j=1;j<=i;j++){
            if(j<i){
                dp[i][j]=(dp[i-1][j]+triangle[i][j])<(dp[i-1][j-1]+triangle[i][j])?(dp[i-1][j]+triangle[i][j]):(dp[i-1][j-1]+triangle[i][j]);
            }
            else{
                dp[i][j]=dp[i-1][j-1]+triangle[i][j];
            }
        }
    }
    int ret=dp[triangleSize-1][0];
    for(int i=1;i<triangleSize;i++){
        ret=(ret)<(dp[triangleSize-1][i])?(ret):(dp[triangleSize-1][i]);
    }
    return ret;

思路和矩阵基本一致，到[i,j]处的两条路径是：从[i-1，j]处移过来或者从[i-1，j-1]处移过来

### 下降路径最小和
>给你一个 n x n 的 方形 整数数组 matrix ，请你找出并返回通过 matrix 的下降路径 的 最小和 。  
下降路径 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 (row, col) 的下一个元素应当是 (row + 1, col - 1)、(row + 1, col) 或者 (row + 1, col + 1) 。

    int **dp;
    dp = (int **)malloc(sizeof(int *) * matrixSize);
    for (int i = 0; i < matrixSize; i++)
    {
        dp[i] = (int *)malloc(sizeof(int) * (matrixSize));
        memset(dp[i], 0, sizeof(int) * (matrixSize));
    }
    for (int i = 0; i < matrixSize; i++)
    {
        dp[0][i] = matrix[0][i];
    }
    for (int i = 1; i < matrixSize; i++)
    {
        for (int j = 0; j < *matrixColSize; j++)
        {
            if (j == 0)
            {
                dp[i][j] = fmin(dp[i - 1][j], dp[i - 1][j + 1], 999999) + matrix[i][j];
            }
            else if (j == matrixSize - 1)
            {
                dp[i][j] =
                    fmin(dp[i - 1][j - 1], dp[i - 1][j], 999999) + matrix[i][j];
            }
            else
            {
                dp[i][j] =
                    fmin(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + matrix[i][j];
            }
        }
    }
    int ret = dp[matrixSize - 1][0];
    for (int i = 0; i < matrixSize; i++)
    {
        ret=ret < dp[matrixSize - 1][i] ? ret : dp[matrixSize - 1][i];
    }
    return ret;

和上一题三角形最小路径基本一致。需要注意对边界条件的调整

<a name="MaxSquare"></a>

### 最大正方形
>在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。

    int **dp;
    dp = (int **)malloc(sizeof(int *) * matrixSize);
    for (int i = 0; i < matrixSize; i++)
    {
        dp[i] = (int *)malloc(sizeof(int) * (*matrixColSize));
        memset(dp[i], 0, sizeof(int) * (*matrixColSize));
    }
    
    for (int i = 0; i < matrixSize; i++)
    {
    
        if (matrix[i][0] == '1')
            dp[i][0] = 1;
    }
    for (int i = 0; i < *matrixColSize; i++)
    {
        if (matrix[0][i] == '1')
            dp[0][i] = 1;
    }
    
    for (int i = 1; i < matrixSize; i++)
    {
        for (int j = 1; j < *matrixColSize; j++)
        {
            if (matrix[i][j] == '1')
                dp[i][j] =
                    fmin(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1;
            else
                dp[i][j] = 0;
        }
    }
    
    int max = 0;
    for (int i = 0; i < matrixSize; i++)
    {
        for (int j = 0; j < *matrixColSize; j++)
        {
            max = max < dp[i][j] ? dp[i][j] : max;
        }
    }
    return max * max;

当我们判断**以某个点为正方形右下角**时最大的正方形时，那它的上方，左方和左上方三个点也**一定是某个正方形的右下角**，否则该点为右下角的正方形最大就是它自己了。这是定性的判断，  
那具体的最大正方形边长呢？  
我们知道，该点为右下角的正方形的最大边长，最多比它的上方，左方和左上方为右下角的正方形的边长**多1**，最好的情况是是它的上方，左方和左上方为右下角的正方形的大小都一样的，这样加上该点就可以构成一个更大的正方形。  
但如果它的上方，左方和左上方为右下角的正方形的大小不一样，合起来就会缺了某个角落，这时候只能**取那三个正方形中最小的正方形的边长加1**了。  
假设dp[i][j]表示以i, j为右下角的正方形的最大边长，  
则有 dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1   
当然，如果这个点在原矩阵中本身就是0的话，那dp[i][j] 肯定就是0了。


<a name="longest"></a>
### 最长回文子串

>给你一个字符串 s，找到 s 中最长的回文子串。

```c
int n = strlen(s);
if (n == 0) return "";

int dp[n][n];
memset(dp, 0, sizeof(dp));

int maxLength = 1;
int start = 0;

for (int i = 0; i < n; i++) {
    dp[i][i] = 1;
}

for (int i = 0; i < n - 1; i++) {
    if (s[i] == s[i + 1]) {
        dp[i][i + 1] = 1;
        start = i;
        maxLength = 2;
    }
}

for (int k = 3; k <= n; k++) {
    for (int i = 0; i < n - k + 1; i++) {
        int j = i + k - 1;
        if (dp[i + 1][j - 1] && s[i] == s[j]) {
            dp[i][j] = 1;
            if (k > maxLength) {
                start = i;
                maxLength = k;
            }
        }
    }
}

static char result[1000];
strncpy(result, s + start, maxLength);
result[maxLength] = '\0';
return result;
```

中心扩散的方法。  
先初始化长度为1、2的子串，再去由短到长（k即是字串长度）遍历。  
这么做的原因是，状态转移中，**长字符串的状态判断依赖于短字符串的状态**，所以要先遍历得到短字符串的状态(是否回文)


## LeetCode 数组和字符串

### 寻找数组的中心索引
>给你一个整数数组 nums ，请计算数组的 中心下标 。  
数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。  
如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。  
如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。

```c
int totalSum = 0;
int leftSum = 0;

// 计算数组的总和
for (int i = 0; i < numsSize; i++) {
    totalSum += nums[i];
}

// 遍历数组，计算左边和右边的和
for (int i = 0; i < numsSize; i++) {
    // 右边的和等于总和减去当前元素和左边的和
    int rightSum = totalSum - leftSum - nums[i];

    // 如果左边的和等于右边的和，返回当前索引
    if (leftSum == rightSum) {
        return i;
    }

    // 更新左边的和
    leftSum += nums[i];
}

// 如果没有找到满足条件的中间位置，返回-1
return -1;
```

一开始的思路是对每个元素遍历求左边和和右边和；后来用**左边和+右边和=总和**做了简单的化简

<a name="Merge"></a>
### 合并区间 
>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。  
示例：  
输入：intervals = [[1,3],[2,6],[8,10],[15,18]]  
输出：[[1,6],[8,10],[15,18]]  
解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

    Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
    // Merge the intervals
    List<int[]> list = new ArrayList<>();
    int start = intervals[0][0];
    int end = intervals[0][1];
    for (int i = 1; i < intervals.length; i++) {
        if (intervals[i][0] <= end) {
            end = Math.max(end, intervals[i][1]);
        } else {
            list.add(new int[] { start, end });
            start = intervals[i][0];
            end = intervals[i][1];
        }
    }
    list.add(new int[] { start, end });
    return list.toArray(new int[list.size()][]);

思路是很容易想到的：某个区间前端点大于另一个区间前端点同时小于其后端点，两个区间就能合并  

**代码解释：**

    Arrays.sort(intervals, (a, b) -> a[0] - b[0]);  
    使用 Arrays.sort 方法对区间进行排序，排序依据是每个区间的起始值 start。这样可以确保后续处理时，区间是按起始值从小到大排列的。  
    List<int[]> list = new ArrayList<>();  
    int start = intervals[0][0];  
    int end = intervals[0][1];  
    创建一个 ArrayList 来存储合并后的区间。并初始化 start 和 end 变量，分别表示当前处理区间的起始值和结束值，初始值为第一个区间的起始值和结束值。    
    for (int i = 1; i < intervals.length; i++) {  
        if (intervals[i][0] <= end) {  
            end = Math.max(end, intervals[i][1]);  
        } else {  
            list.add(new int[] { start, end });  
            start = intervals[i][0];  
            end = intervals[i][1];  
            }  
        }  
    遍历剩余的区间：  
    如果当前区间的起始值 intervals[i][0] 小于等于 end，说明当前区间与前一个区间重叠，此时更新 end 为两个区间结束值的最大值。  
    如果当前区间的起始值大于 end，说明当前区间与前一个区间不重叠，将前一个区间 [start, end] 添加到结果列表中，并更新 start 和 end 为当前区间的起始值和结束值

<button onclick="topFunction()" id="topBtn" title="Go to top">Top</button>

<style>
#topBtn {
  display: none; /* 隐藏按钮 */
  position: fixed; /* 固定位置 */
  bottom: 20px; /* 距离底部20px */
  right: 30px; /* 距离右侧30px */
  z-index: 99; /* 确保按钮在最前面 */
  border: none; /* 无边框 */
  outline: none; /* 无轮廓 */
  background-color: #555; /* 背景颜色 */
  color: white; /* 字体颜色 */
  cursor: pointer; /* 鼠标指针 */
  padding: 15px; /* 内边距 */
  border-radius: 10px; /* 圆角 */
}

#topBtn:hover {
  background-color: #333; /* 鼠标悬停时的背景颜色 */
}
</style>

<script>
// 当用户向下滚动 20px 时，显示按钮
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
    document.getElementById("topBtn").style.display = "block";
  } else {
    document.getElementById("topBtn").style.display = "none";
  }
}

// 当用户点击按钮时，回到顶部
function topFunction() {
//   document.body.scrollTop = 0; // For Safari
//   document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    window.scrollTo({ top: 0, behavior: 'smooth' });
}
</script>